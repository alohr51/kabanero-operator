// Code generated by vfsgen; DO NOT EDIT.

// +build !dev

package config

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// assets statically implements the virtual filesystem provided to vfsgen.
var assets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2019, 6, 11, 18, 24, 13, 172718665, time.UTC),
		},
		"/.DS_Store": &vfsgen۰CompressedFileInfo{
			name:             ".DS_Store",
			modTime:          time.Date(2019, 6, 11, 16, 37, 25, 466810921, time.UTC),
			uncompressedSize: 6148,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x98\x41\x6a\x85\x30\x10\x86\xff\x49\x5d\x84\x76\x93\x65\x97\xb9\x42\x6f\x10\xc4\x9e\xc0\x0b\x14\xac\x94\x82\x28\x08\xed\xda\x55\xcf\xd5\xa3\x15\xc9\x5f\x2a\xa8\x5d\xbd\xc7\xf3\x3d\xfe\x0f\xc2\xb7\x70\x46\x25\x8b\x64\x66\x00\x58\xf9\xf1\xfa\x04\x04\x00\x1e\xd9\xf8\xc2\x26\x9e\x6b\x85\xa3\x2d\xaf\x00\xf4\x68\xf0\x8e\x0e\x2d\xc6\xed\x77\xad\x98\x73\xef\x31\xa2\x45\x83\x61\x99\xff\x59\x8f\x7d\x37\xf4\x6f\x8c\x11\x42\x08\x21\xc4\x69\xe0\xbd\xea\x1f\x2e\xfd\x23\x42\x88\xc3\x31\x9f\x0f\x91\x4e\xf4\x94\x6d\x7c\xee\xe8\x62\x91\x13\xe8\x48\x27\x7a\xca\x36\xc6\x39\xba\xa0\x3d\x1d\xe8\x48\x27\x7a\xca\xe6\xa1\x65\x6c\x3e\x8c\x5f\x36\x76\x28\x16\xe8\x48\xa7\xf3\xec\x8d\x10\xd7\xce\x5d\x56\x98\xef\xff\xe7\xfd\xfe\x5f\x08\x71\xc3\x58\x51\xd5\x55\xf9\xcf\xa0\xcd\xb1\x10\x78\x61\xcc\xf7\x6f\xe2\x4e\x21\xe0\xf2\xc0\xf0\x11\x7f\x71\x2a\x06\x84\x38\x10\x3f\x01\x00\x00\xff\xff\xf5\x1b\x1c\xd2\x04\x18\x00\x00"),
		},
		"/components.yaml": &vfsgen۰CompressedFileInfo{
			name:             "components.yaml",
			modTime:          time.Date(2019, 6, 6, 21, 39, 46, 334753033, time.UTC),
			uncompressedSize: 717,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x91\xc1\x8e\xdb\x30\x0c\x44\xef\xfa\x8a\x01\x7c\xcd\x1a\x69\x7b\xf3\x2f\x14\x6d\x2f\x05\x7a\x56\x24\x7a\x2d\x44\x16\x55\x89\x4a\xb0\x7f\x5f\x50\x5e\x3b\x9b\x5e\xf6\x28\x0e\x39\x7c\x1c\x0d\xf8\x61\x73\xc5\x77\x7b\xb1\x89\x0a\x23\x47\x2b\x33\x97\x15\x85\x6e\xa1\x06\x4e\x15\xc2\x28\x14\xad\x90\x87\xe3\x35\x73\xa2\x24\x0f\xd9\x0c\x68\xc9\x53\xa9\xc2\xec\x71\x79\x83\x2c\x04\x96\x85\x0a\x38\x53\xb1\xc2\xa5\x8e\x30\x66\xc0\x4f\x16\xea\xea\xcc\x31\xf2\x3d\xa4\x57\x54\xfa\xdb\x28\x39\x9a\x7a\xfd\x80\xd8\x07\x71\x21\xc7\x2b\x55\xd8\xbb\x2d\x64\x06\xf0\x0c\x8b\x44\x77\xdc\xa8\xe8\x76\x2d\x3c\x4d\xee\xf8\x27\x84\x84\x6c\x8b\x28\x11\xf9\x20\xba\x4d\x96\x50\x31\x87\xa8\x4e\xbf\x92\xdb\x60\x0e\x48\xd8\x42\x28\x1c\x23\x79\x70\x93\x53\x57\xad\x5f\x43\x0a\x55\x36\x1c\x67\x13\xdc\xc2\x5c\x49\x43\x69\x55\x8d\xb4\x4b\x89\x0e\x84\x1d\xed\x69\xf1\x07\xc4\x42\x95\x5b\x71\x34\xe2\xb7\xf2\x38\xdb\x2a\x69\x8a\x5b\x66\xbb\xda\x63\xbf\x10\x5a\xf6\x3d\xf9\x56\x8f\x0b\x56\x9b\x73\x48\xaf\xc6\x1c\x7f\x30\x19\x03\x0c\xf8\xb3\x50\xea\xbb\x76\x13\x78\xa6\x8a\xc4\x82\x9a\xc9\x85\xf9\x0d\xf7\x25\xb8\xe5\xf1\xc9\xef\xac\x27\xbd\x65\x33\xbf\xd9\xd8\xa8\xbb\x75\xba\xba\x70\x8b\x5e\x41\xae\x94\x05\x2d\x2b\x96\x12\x19\xc0\xb5\x52\x28\xc9\x64\x00\xe0\xfa\x7e\xde\x84\xf3\x78\x1e\xbf\x40\x89\x5e\xfe\xaf\xf6\x4e\xa1\xab\x70\x9a\xd0\x1f\xd8\x11\xb4\xe3\x5b\xef\x78\x4c\xbd\x7c\xd0\xce\xe3\xd7\xcf\xa7\xff\x05\x00\x00\xff\xff\x42\x2b\xf9\xf5\xcd\x02\x00\x00"),
		},
		"/reconciler": &vfsgen۰DirInfo{
			name:    "reconciler",
			modTime: time.Date(2019, 6, 11, 18, 26, 35, 718610629, time.UTC),
		},
		"/reconciler/.DS_Store": &vfsgen۰CompressedFileInfo{
			name:             ".DS_Store",
			modTime:          time.Date(2019, 6, 11, 18, 26, 35, 719115656, time.UTC),
			uncompressedSize: 6148,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\xd8\x31\x0a\x02\x31\x10\x85\xe1\x37\x31\x45\xc0\x26\xa5\x65\x1a\x0f\xe0\x0d\xc2\xb2\x9e\xc0\x0b\x58\x78\x05\xfb\x1c\x5d\x96\x79\x60\x60\xd5\x4e\x8c\xcb\xfb\x40\xfe\x05\x37\x2a\x16\x31\x23\x00\x9b\xee\xb7\x13\x90\x01\x24\x78\x71\xc4\x4b\x89\x8f\x95\xd0\x5d\x1b\x5f\x43\x44\x44\x44\xc6\x66\x9e\xb4\xff\xf5\x07\x11\x91\xe1\x2c\xfb\x43\x61\x2b\xdb\xbc\xc6\xe7\x03\x1b\xbb\x35\x99\x2d\x6c\x65\x9b\xd7\x78\x5f\x60\x23\x9b\xd8\xcc\x16\xb6\xb2\xcd\xcb\x4d\xcb\x38\x7c\x18\xdf\xd9\x38\xa1\x18\xa7\x10\x2b\x6c\xfd\xce\x77\x23\xf2\xef\x76\x9e\xbc\xfc\xfe\x9f\xdf\xcf\xff\x22\xb2\x61\x16\xe7\xcb\x3c\x3d\x07\x82\xf5\x0d\x00\xae\xdd\xf5\xa7\x43\x40\xf0\x3f\x0b\x0f\xdd\x5a\x1d\x04\x44\x06\xf3\x08\x00\x00\xff\xff\x6a\x00\x88\x6d\x04\x18\x00\x00"),
		},
		"/reconciler/knative-eventing": &vfsgen۰DirInfo{
			name:    "knative-eventing",
			modTime: time.Date(2019, 6, 11, 16, 37, 28, 775669569, time.UTC),
		},
		"/reconciler/knative-eventing/knative-eventing.yaml": &vfsgen۰FileInfo{
			name:    "knative-eventing.yaml",
			modTime: time.Date(2019, 6, 11, 17, 4, 49, 958151004, time.UTC),
			content: []byte("\x61\x70\x69\x56\x65\x72\x73\x69\x6f\x6e\x3a\x20\x65\x76\x65\x6e\x74\x69\x6e\x67\x2e\x6b\x6e\x61\x74\x69\x76\x65\x2e\x64\x65\x76\x2f\x76\x31\x61\x6c\x70\x68\x61\x31\x0a\x6b\x69\x6e\x64\x3a\x20\x4b\x6e\x61\x74\x69\x76\x65\x45\x76\x65\x6e\x74\x69\x6e\x67\x0a\x6d\x65\x74\x61\x64\x61\x74\x61\x3a\x0a\x20\x20\x6e\x61\x6d\x65\x3a\x20\x6b\x6e\x61\x74\x69\x76\x65\x2d\x65\x76\x65\x6e\x74\x69\x6e\x67\x0a\x2d\x2d\x2d"),
		},
		"/reconciler/tekton.yaml": &vfsgen۰CompressedFileInfo{
			name:             "tekton.yaml",
			modTime:          time.Date(2019, 6, 11, 16, 6, 1, 345886467, time.UTC),
			uncompressedSize: 130,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xcb\xb1\x8d\xc3\x30\x0c\x05\xd0\x5e\x53\x70\x01\xdf\xc1\xad\x36\xc8\x02\xe9\x7f\xec\x1f\x58\x90\x4c\x12\x22\xe1\x26\xc8\xee\x29\x92\xf6\x01\x0f\xde\xee\x9c\xd1\x4c\xab\x24\x7b\x9a\xfe\xed\xbc\xfe\xaf\x15\xc3\x0f\xac\xa5\x37\xdd\xab\xdc\x34\x12\x63\x94\x93\x89\x1d\x89\x5a\x44\x14\x27\xab\x74\x3c\xa0\x9c\xb6\x7c\xf3\xcf\xc3\xb1\xb1\x8a\x39\x35\x8e\xf6\xcc\xc5\x9b\x73\x34\x65\x2c\xe6\x9c\x48\x9b\x25\x9c\x5b\x95\xd7\xfb\x13\x00\x00\xff\xff\x88\x28\xa5\x6b\x82\x00\x00\x00"),
		},
		"/samples": &vfsgen۰DirInfo{
			name:    "samples",
			modTime: time.Date(2019, 6, 6, 21, 39, 46, 336122812, time.UTC),
		},
		"/samples/.DS_Store": &vfsgen۰CompressedFileInfo{
			name:             ".DS_Store",
			modTime:          time.Date(2019, 6, 11, 14, 32, 48, 834641316, time.UTC),
			uncompressedSize: 6148,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x98\x41\x4f\xa3\x40\x14\x80\xdf\x50\xb6\x3b\x74\xb3\x59\x0e\x9b\xec\xee\x8d\xcb\xde\x7a\xa0\xbb\x4d\x7b\xda\x84\xb0\xf5\xe0\xcd\x04\xa3\x87\x6a\x5a\x08\xc4\x92\x50\xa6\x01\x2a\x51\xc4\xf4\x77\xe8\x3f\xf2\x0f\xf8\x77\x0c\x9d\xa7\x21\x58\xbd\x19\xab\xbe\x2f\x69\xbe\x29\xc3\x0c\x3c\x86\x0c\x6f\x06\x00\x98\xbd\xf4\x7b\x00\x3a\x00\x70\x90\x56\x34\xd8\x08\xc7\xdf\x23\x94\x9a\xd9\xba\x8f\x08\x02\x2f\x4f\x17\x5e\x24\xbc\xcd\x7d\x11\x5b\x46\x35\x76\x6d\x48\x21\x84\x39\x2c\x1a\xe3\x77\xe3\x2d\xa2\x30\xcd\x4c\xf3\x96\x29\x2d\xf5\x53\xfb\x33\xe7\x1d\xde\xf9\xda\x39\x76\x66\x22\x77\x32\x37\x5b\xa6\xb6\x9b\x8c\xab\x7f\x7b\x6e\x36\xf3\xb0\xbc\x2f\x44\xf4\x50\x76\xbd\x83\x30\xc8\x27\xfa\xf7\xff\x22\xce\xdc\x30\x0e\x92\x75\xe3\xd0\x0f\x3c\x37\x39\x3a\x0c\x63\x5f\xe4\xb6\x58\xc6\x7e\x3a\xae\x55\x70\xae\x71\x6d\xa2\xff\x2a\x8a\x9e\x39\x18\x74\x8d\x3f\xc3\x7e\xd9\x35\x8a\xe1\xd0\xec\x1a\xfd\xbf\x83\xb2\xd4\xf8\x8f\xdf\xbd\x7f\xbb\xd3\xf9\xd9\x79\x71\x51\x5e\x5e\xc9\x60\x18\xc3\xa8\xbe\x35\xa2\xbc\x6e\x46\x79\xea\x24\x71\x24\xe2\x13\xf9\xe6\x12\x04\x41\x7c\x30\x70\xe6\xe3\x5f\x5e\xfb\x46\x08\x82\xd8\x3a\xaa\xf9\xc1\x40\x5b\xe8\x95\x34\xc3\x7a\x05\xad\xd6\xda\xe8\x68\x03\x6d\xa1\x57\xd2\x0c\xcf\x53\xd0\x2a\x9a\xa3\x75\xb4\x81\xb6\xd0\x2b\x69\x9c\xb4\x18\x2e\x3e\x18\x5e\x99\xe1\x0a\x85\xe9\x68\x03\x6d\xbd\xcc\xb3\x21\x88\xb7\x4e\x4b\x4a\xaf\xbe\xff\x3b\x4f\xaf\xff\x09\x82\x78\xc7\x30\x75\xe4\x8c\xec\x67\xb6\x42\x14\x4c\x04\xa6\xf7\x0d\x1a\x89\x00\xd4\x92\x00\x45\x6e\x16\xfe\xac\x1d\xa7\x44\x80\x20\xb6\x8c\xbb\x00\x00\x00\xff\xff\xbb\x1c\x15\xeb\x04\x18\x00\x00"),
		},
		"/samples/full.yaml": &vfsgen۰CompressedFileInfo{
			name:             "full.yaml",
			modTime:          time.Date(2019, 6, 6, 21, 39, 46, 336017792, time.UTC),
			uncompressedSize: 365,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8f\xb1\x6e\xc3\x30\x0c\x44\x77\x7d\xc5\x01\x59\x0b\x37\x46\x37\xad\x1d\x3b\x74\x09\xba\xd3\x11\x0d\x13\x91\x48\x41\x62\x5c\xa4\x5f\x5f\xc4\x49\x93\x6e\xc2\x9d\xee\x1d\x8f\xaa\x7c\x71\xeb\x62\x1a\x71\xa2\x89\x94\x9b\x0d\x62\xaf\xeb\x48\xb9\x2e\x34\x86\x93\x68\x8a\xf8\xb8\x5b\xa1\xb0\x53\x22\xa7\x18\x00\xa5\xc2\xcf\x54\xe8\x95\x8f\x57\x79\x87\xc3\xc2\xa8\x99\x7c\xb6\x56\xb0\xde\xf0\x48\xec\xdc\x8a\x28\x77\xf8\xc2\x48\xdc\xa5\x71\x7a\xd8\xb3\x35\x50\xce\x38\x5a\xa9\xa6\xac\xde\x5f\x30\x9d\x1d\xbe\x58\xe7\x8d\x7a\x24\xc5\xc4\xb0\x95\x5b\x93\xc4\x0a\xd1\x24\xab\xa4\x33\xe5\x7c\x01\x75\x7c\x73\xce\x01\x7f\xc4\x88\xfd\xb0\x1f\xc6\xb0\x65\xdf\xcf\xdd\xad\xc8\xcf\xa3\xbc\x66\xbb\x14\x56\x87\xcd\x38\xf0\xc9\x4d\x03\xe0\xdb\x23\x22\x00\x40\x92\x4e\x53\xe6\x14\x31\x53\xee\x1c\x36\x71\x87\xcf\x7b\xfd\x0d\xf4\x58\x79\x1d\x2f\xb3\x3c\x07\x6d\xdf\xff\x9d\xf2\x36\x8c\xe1\x37\x00\x00\xff\xff\xa2\xb2\x09\xa2\x6d\x01\x00\x00"),
		},
		"/samples/simple.yaml": &vfsgen۰FileInfo{
			name:    "simple.yaml",
			modTime: time.Date(2019, 6, 6, 21, 39, 46, 336189682, time.UTC),
			content: []byte("\x61\x70\x69\x56\x65\x72\x73\x69\x6f\x6e\x3a\x20\x6b\x61\x62\x61\x6e\x65\x72\x6f\x2e\x69\x6f\x2f\x76\x31\x61\x6c\x70\x68\x61\x31\x0a\x6b\x69\x6e\x64\x3a\x20\x4b\x61\x62\x61\x6e\x65\x72\x6f\x0a\x6d\x65\x74\x61\x64\x61\x74\x61\x3a\x0a\x20\x20\x6e\x61\x6d\x65\x3a\x20\x6b\x61\x62\x61\x6e\x65\x72\x6f\x0a\x73\x70\x65\x63\x3a\x20\x7b\x7d"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/.DS_Store"].(os.FileInfo),
		fs["/components.yaml"].(os.FileInfo),
		fs["/reconciler"].(os.FileInfo),
		fs["/samples"].(os.FileInfo),
	}
	fs["/reconciler"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/reconciler/.DS_Store"].(os.FileInfo),
		fs["/reconciler/knative-eventing"].(os.FileInfo),
		fs["/reconciler/tekton.yaml"].(os.FileInfo),
	}
	fs["/reconciler/knative-eventing"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/reconciler/knative-eventing/knative-eventing.yaml"].(os.FileInfo),
	}
	fs["/samples"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/samples/.DS_Store"].(os.FileInfo),
		fs["/samples/full.yaml"].(os.FileInfo),
		fs["/samples/simple.yaml"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰FileInfo:
		return &vfsgen۰File{
			vfsgen۰FileInfo: f,
			Reader:          bytes.NewReader(f.content),
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰FileInfo is a static definition of an uncompressed file (because it's not worth gzip compressing).
type vfsgen۰FileInfo struct {
	name    string
	modTime time.Time
	content []byte
}

func (f *vfsgen۰FileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰FileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰FileInfo) NotWorthGzipCompressing() {}

func (f *vfsgen۰FileInfo) Name() string       { return f.name }
func (f *vfsgen۰FileInfo) Size() int64        { return int64(len(f.content)) }
func (f *vfsgen۰FileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰FileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰FileInfo) IsDir() bool        { return false }
func (f *vfsgen۰FileInfo) Sys() interface{}   { return nil }

// vfsgen۰File is an opened file instance.
type vfsgen۰File struct {
	*vfsgen۰FileInfo
	*bytes.Reader
}

func (f *vfsgen۰File) Close() error {
	return nil
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
