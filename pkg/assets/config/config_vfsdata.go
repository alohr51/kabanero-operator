// Code generated by vfsgen; DO NOT EDIT.

// +build !dev

package config

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// assets statically implements the virtual filesystem provided to vfsgen.
var assets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2019, 8, 19, 14, 35, 22, 446891729, time.UTC),
		},
		"/components.yaml": &vfsgen۰CompressedFileInfo{
			name:             "components.yaml",
			modTime:          time.Date(2019, 7, 30, 17, 44, 17, 333534495, time.UTC),
			uncompressedSize: 718,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x91\xc1\x8e\xdb\x30\x0c\x44\xef\xfa\x8a\x01\x7c\xcd\x1a\x69\x7b\xf3\x2f\x14\x6d\x2f\x05\x7a\x56\x24\x7a\x2d\x44\x16\x55\x89\x4a\xb0\x7f\x5f\x50\x5e\x3b\x9b\x9e\xf6\x28\x0e\x39\x7c\x1c\x0d\xf8\x61\x73\xc5\x77\x7b\xb1\x89\x0a\x23\x47\x2b\x33\x97\x15\x85\x6e\xa1\x06\x4e\x15\xc2\x28\x14\xad\x90\x87\xe3\x35\x73\xa2\x24\x0f\xd9\x0c\x68\xc9\x53\xa9\xc2\xec\x71\x79\x83\x2c\x04\x96\x85\x0a\x38\x53\xb1\xc2\xa5\x8e\x30\x66\xc0\x4f\x16\xea\xea\xcc\x31\xf2\x3d\xa4\x57\x54\xfa\xdb\x28\x39\x9a\x7a\xfd\x80\xd8\x07\x71\x21\xc7\x2b\x55\xd8\xbb\x2d\x64\x06\xf0\x0c\x8b\x44\x77\xdc\xa8\xe8\x76\x2d\x3c\x4d\xee\xf8\x27\x84\x84\x6c\x8b\x28\x11\xf9\x20\xba\x4d\x96\x50\x31\x87\xa8\x4e\xbf\x92\xdb\x60\x0e\x48\xd8\x42\x28\x1c\x23\x79\x70\x93\x53\x57\xad\x5f\x43\x0a\x55\x36\x1c\x67\x13\xdc\xc2\x5c\x49\x43\x69\x55\x8d\xb4\x4b\x89\x0e\x84\x1d\xed\x69\xf1\x07\xc4\x42\x95\x5b\x71\x34\xe2\xb7\xf2\x38\xdb\x2a\x69\x8a\x5b\x66\xbb\xda\x63\xbf\x10\x5a\xf6\x3d\xf9\x56\x8f\x0b\x56\x9b\x73\x48\xaf\xc6\x1c\x7f\x30\x19\x03\x0c\xf8\xb3\x50\xea\xbb\x76\x13\x78\xa6\x8a\xc4\x82\x9a\xc9\x85\xf9\x0d\xf7\x25\xb8\xe5\xf1\xc9\xef\xac\x27\xbd\x65\x33\xbf\xd9\xd8\xa8\xbb\x75\xba\xba\x70\x8b\x5e\x41\xae\x94\x05\x2d\x2b\x96\x12\x19\xc0\xb5\x52\x28\xc9\x64\x00\xe0\xfa\x7e\xde\x84\xf3\x78\x1e\xbf\x40\x89\x5e\xfe\xaf\xf6\x4e\xa1\xab\x70\x9a\xd0\x1f\xd8\x11\xb4\xe3\x5b\xef\x78\x4c\xbd\x7c\xd0\xce\xe3\xd7\x4f\x4c\xff\x0b\x00\x00\xff\xff\x04\xdf\xf0\xaa\xce\x02\x00\x00"),
		},
		"/samples": &vfsgen۰DirInfo{
			name:    "samples",
			modTime: time.Date(2019, 8, 19, 14, 35, 22, 302892411, time.UTC),
		},
		"/samples/collection.yaml": &vfsgen۰FileInfo{
			name:    "collection.yaml",
			modTime: time.Date(2019, 7, 30, 17, 44, 25, 112500426, time.UTC),
			content: []byte("\x61\x70\x69\x56\x65\x72\x73\x69\x6f\x6e\x3a\x20\x6b\x61\x62\x61\x6e\x65\x72\x6f\x2e\x69\x6f\x2f\x76\x31\x61\x6c\x70\x68\x61\x31\x0a\x6b\x69\x6e\x64\x3a\x20\x43\x6f\x6c\x6c\x65\x63\x74\x69\x6f\x6e\x0a\x6d\x65\x74\x61\x64\x61\x74\x61\x3a\x0a\x20\x20\x6e\x61\x6d\x65\x3a\x20\x6a\x61\x76\x61\x2d\x6d\x69\x63\x72\x6f\x70\x72\x6f\x66\x69\x6c\x65\x0a\x73\x70\x65\x63\x3a\x0a\x20\x20\x76\x65\x72\x73\x69\x6f\x6e\x3a\x20\x31\x2e\x30\x2e\x30"),
		},
		"/samples/full.yaml": &vfsgen۰CompressedFileInfo{
			name:             "full.yaml",
			modTime:          time.Date(2019, 8, 19, 14, 35, 22, 302892411, time.UTC),
			uncompressedSize: 552,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x90\xbd\x6e\xdb\x40\x10\x84\x7b\x3e\xc5\x00\x6e\x63\xd2\x6a\xd9\x19\x49\x97\x36\x48\xbf\xba\x1b\xe5\x16\xbe\x1f\x62\x6f\x49\xd9\x6f\x1f\x88\x92\x22\x21\xdd\xe1\x66\xf7\x9b\x9d\x91\x45\x7f\xd3\xba\xb6\x3a\xe3\x43\x8e\x52\x69\x6d\xd4\x36\x6d\x07\xc9\x4b\x92\xc3\xf0\xa1\x35\xce\xf8\x79\x93\x86\x42\x97\x28\x2e\xf3\x00\x54\x29\x7c\x6c\x0d\x7d\x61\xb8\x7c\xbf\xe0\x57\x22\x96\x2c\x7e\x6a\x56\xb0\x5d\xf1\x88\x74\x5a\xd1\xca\x0e\x4f\x44\x64\x57\x63\xfc\x27\x9f\x9a\x41\x72\x46\x68\x65\x69\x95\xd5\xfb\x37\x1c\x57\x87\xa7\xd6\xb9\x53\x83\x54\x1c\x89\xb6\xd1\x4c\x23\x2b\xb4\x46\xdd\x34\xae\x92\xf3\x17\xa4\xe3\xcc\x9c\x07\xdc\x89\x33\xde\xc6\xb7\xf1\x30\x0c\x40\x68\x39\x33\xb8\xb6\xda\x67\x0c\xc0\x85\xf6\x8e\xac\xdd\xd1\x4e\x57\x07\x18\x97\xd6\xd5\x9b\x29\x3b\xce\x49\x43\x82\x18\xd1\x29\x16\x12\xe3\x7e\xdf\x13\x67\xa7\x3c\xef\xdc\xc0\xaf\xb7\x56\xf8\xb9\xd0\xb4\xb0\xba\xe4\x5d\x00\x56\xcb\x33\x92\xfb\xd2\xe7\x69\x32\x39\x8f\x7f\xd4\xd3\x7a\x5c\x3b\x2d\xb4\xea\xac\x3e\x86\x56\xa6\x7b\x9f\xaf\xda\x1e\xef\x87\xf3\x54\xa4\x3b\x6d\x7a\x36\x98\xb4\x46\x7e\x8e\x5f\x52\xee\x5e\x2f\x78\x0f\xae\x9b\x38\x3b\x04\x91\x27\x59\xb3\xa3\x73\x0f\xfc\x7f\x0c\x40\x6e\xc3\x3f\xae\x83\xdf\x9f\xfb\x72\x5b\x89\xe1\x6f\x00\x00\x00\xff\xff\xc0\x30\xab\x98\x28\x02\x00\x00"),
		},
		"/samples/simple.yaml": &vfsgen۰FileInfo{
			name:    "simple.yaml",
			modTime: time.Date(2019, 7, 30, 17, 44, 17, 334534490, time.UTC),
			content: []byte("\x61\x70\x69\x56\x65\x72\x73\x69\x6f\x6e\x3a\x20\x6b\x61\x62\x61\x6e\x65\x72\x6f\x2e\x69\x6f\x2f\x76\x31\x61\x6c\x70\x68\x61\x31\x0a\x6b\x69\x6e\x64\x3a\x20\x4b\x61\x62\x61\x6e\x65\x72\x6f\x0a\x6d\x65\x74\x61\x64\x61\x74\x61\x3a\x0a\x20\x20\x6e\x61\x6d\x65\x3a\x20\x6b\x61\x62\x61\x6e\x65\x72\x6f\x0a\x73\x70\x65\x63\x3a\x20\x7b\x7d\x0a"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/components.yaml"].(os.FileInfo),
		fs["/samples"].(os.FileInfo),
	}
	fs["/samples"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/samples/collection.yaml"].(os.FileInfo),
		fs["/samples/full.yaml"].(os.FileInfo),
		fs["/samples/simple.yaml"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰FileInfo:
		return &vfsgen۰File{
			vfsgen۰FileInfo: f,
			Reader:          bytes.NewReader(f.content),
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰FileInfo is a static definition of an uncompressed file (because it's not worth gzip compressing).
type vfsgen۰FileInfo struct {
	name    string
	modTime time.Time
	content []byte
}

func (f *vfsgen۰FileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰FileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰FileInfo) NotWorthGzipCompressing() {}

func (f *vfsgen۰FileInfo) Name() string       { return f.name }
func (f *vfsgen۰FileInfo) Size() int64        { return int64(len(f.content)) }
func (f *vfsgen۰FileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰FileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰FileInfo) IsDir() bool        { return false }
func (f *vfsgen۰FileInfo) Sys() interface{}   { return nil }

// vfsgen۰File is an opened file instance.
type vfsgen۰File struct {
	*vfsgen۰FileInfo
	*bytes.Reader
}

func (f *vfsgen۰File) Close() error {
	return nil
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
