// Code generated by vfsgen; DO NOT EDIT.

// +build !dev

package config

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// assets statically implements the virtual filesystem provided to vfsgen.
var assets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2019, 8, 21, 0, 41, 55, 959318519, time.UTC),
		},
		"/components.yaml": &vfsgen۰CompressedFileInfo{
			name:             "components.yaml",
			modTime:          time.Date(2019, 7, 30, 17, 44, 17, 333534495, time.UTC),
			uncompressedSize: 718,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x91\xc1\x8e\xdb\x30\x0c\x44\xef\xfa\x8a\x01\x7c\xcd\x1a\x69\x7b\xf3\x2f\x14\x6d\x2f\x05\x7a\x56\x24\x7a\x2d\x44\x16\x55\x89\x4a\xb0\x7f\x5f\x50\x5e\x3b\x9b\x9e\xf6\x28\x0e\x39\x7c\x1c\x0d\xf8\x61\x73\xc5\x77\x7b\xb1\x89\x0a\x23\x47\x2b\x33\x97\x15\x85\x6e\xa1\x06\x4e\x15\xc2\x28\x14\xad\x90\x87\xe3\x35\x73\xa2\x24\x0f\xd9\x0c\x68\xc9\x53\xa9\xc2\xec\x71\x79\x83\x2c\x04\x96\x85\x0a\x38\x53\xb1\xc2\xa5\x8e\x30\x66\xc0\x4f\x16\xea\xea\xcc\x31\xf2\x3d\xa4\x57\x54\xfa\xdb\x28\x39\x9a\x7a\xfd\x80\xd8\x07\x71\x21\xc7\x2b\x55\xd8\xbb\x2d\x64\x06\xf0\x0c\x8b\x44\x77\xdc\xa8\xe8\x76\x2d\x3c\x4d\xee\xf8\x27\x84\x84\x6c\x8b\x28\x11\xf9\x20\xba\x4d\x96\x50\x31\x87\xa8\x4e\xbf\x92\xdb\x60\x0e\x48\xd8\x42\x28\x1c\x23\x79\x70\x93\x53\x57\xad\x5f\x43\x0a\x55\x36\x1c\x67\x13\xdc\xc2\x5c\x49\x43\x69\x55\x8d\xb4\x4b\x89\x0e\x84\x1d\xed\x69\xf1\x07\xc4\x42\x95\x5b\x71\x34\xe2\xb7\xf2\x38\xdb\x2a\x69\x8a\x5b\x66\xbb\xda\x63\xbf\x10\x5a\xf6\x3d\xf9\x56\x8f\x0b\x56\x9b\x73\x48\xaf\xc6\x1c\x7f\x30\x19\x03\x0c\xf8\xb3\x50\xea\xbb\x76\x13\x78\xa6\x8a\xc4\x82\x9a\xc9\x85\xf9\x0d\xf7\x25\xb8\xe5\xf1\xc9\xef\xac\x27\xbd\x65\x33\xbf\xd9\xd8\xa8\xbb\x75\xba\xba\x70\x8b\x5e\x41\xae\x94\x05\x2d\x2b\x96\x12\x19\xc0\xb5\x52\x28\xc9\x64\x00\xe0\xfa\x7e\xde\x84\xf3\x78\x1e\xbf\x40\x89\x5e\xfe\xaf\xf6\x4e\xa1\xab\x70\x9a\xd0\x1f\xd8\x11\xb4\xe3\x5b\xef\x78\x4c\xbd\x7c\xd0\xce\xe3\xd7\x4f\x4c\xff\x0b\x00\x00\xff\xff\x04\xdf\xf0\xaa\xce\x02\x00\x00"),
		},
		"/reconciler": &vfsgen۰DirInfo{
			name:    "reconciler",
			modTime: time.Date(2019, 8, 21, 1, 37, 3, 679843507, time.UTC),
		},
		"/reconciler/kabanero-cli.yaml": &vfsgen۰CompressedFileInfo{
			name:             "kabanero-cli.yaml",
			modTime:          time.Date(2019, 8, 21, 1, 37, 3, 669843562, time.UTC),
			uncompressedSize: 1936,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x54\x41\x4f\xe3\x4a\x0c\xbe\xe7\x57\x58\xbc\x03\xd2\x93\x12\x84\xe0\x00\x73\x2b\x3c\xde\x6a\xb5\x2c\x5b\x15\xb4\x57\x34\x9d\xba\x8d\x61\x32\x1e\xcd\x38\x45\xe5\xd7\xaf\x26\x4d\x4a\xda\x84\x05\xed\xe6\xd2\xa9\xed\xf9\xfc\xd9\xf3\xd9\xda\xd3\x4f\x0c\x91\xd8\x29\xd0\xde\xc7\x93\xf5\x69\xf6\x4c\x6e\xa1\xe0\x3f\xf4\x96\x37\x15\x3a\xc9\x2a\x14\xbd\xd0\xa2\x55\x06\xe0\x74\x85\x0a\x9e\xf5\x5c\x3b\x0c\x9c\x1b\x4b\x59\xf4\x68\x92\x2b\xa2\x45\x23\x1c\xd2\x19\xa0\xd2\x62\xca\x5b\x3d\x47\x1b\xb7\x06\x48\x09\x0e\xae\x02\x04\xf4\x96\x8c\x8e\x0a\x4e\x33\x00\xc1\xca\x5b\x2d\xd8\x42\xf4\xf2\xa6\xcf\xee\xa1\x8d\xe3\x01\x74\x74\x9a\x33\x86\x35\x19\x9c\x18\xc3\xb5\x93\xbb\x21\xf7\x6d\x98\x61\x27\x9a\x1c\x86\x1e\x78\x3e\x56\x2a\xec\xbe\x7f\x60\x86\xde\x6a\x83\x20\x25\x45\x78\x21\x29\x41\x4a\x84\x79\x4d\x56\x80\x2a\xbd\xc2\x06\xa0\x77\xa5\x31\x2a\x60\x8f\x2e\xb7\x34\xc7\x20\x1b\x55\x91\x09\x3c\x0d\xbc\x24\x8b\x67\xf9\x93\x5e\xeb\x8b\x3c\x05\x3c\x5d\xf6\x2e\x7a\x0e\xd2\x63\x96\xb8\xed\x18\x4f\x39\x88\x82\xcb\xf3\xf3\xb3\xc3\x4c\xd3\xda\xda\x29\x5b\x32\x1b\x05\x13\xfb\xa2\x37\xb1\x17\x81\x6e\xdd\x07\x7c\x2b\xf7\xdb\xe4\x6a\x72\x77\x33\xfb\xf1\x78\x7d\xfb\xf5\xf1\x6e\xf2\xfd\xe6\x7e\x3a\xb9\xbe\xd9\x0b\x05\x58\x6b\x5b\xe3\xff\x81\x2b\x75\xe0\x00\x58\x12\xda\xc5\x0c\x97\x43\x4f\xeb\x9b\x6a\x29\xd5\xee\x69\x8b\xa6\x47\x79\x9e\x67\x7d\x25\xee\x44\x78\xbf\x7d\xbf\x3f\x53\xe0\x98\x3c\x76\xad\xcc\xc1\x07\x16\x36\x6c\x15\x3c\x5c\x4f\xb3\xae\xcf\x0a\xba\x56\x8a\x0e\x2b\x94\x5e\x7f\x0f\x59\x06\xae\x05\x8b\xf4\x5a\xb1\xa4\xa5\x14\xc4\x6f\xd3\x33\x4b\xbe\xcf\xd2\x16\xde\x12\xde\xaf\x39\x59\x46\x25\x28\xdd\x0c\x08\x86\x8a\x9c\x96\x86\x8d\xd7\x31\x4a\x19\xb8\x5e\x95\x43\xa6\x73\x6d\x0a\x5d\x4b\xc9\x81\x5e\x9b\xf8\xe2\xf9\x22\x1e\x10\xb6\xfb\x7c\x4d\xc0\x26\xf2\x81\x2a\x8c\xa2\x2b\xaf\xc0\xd5\xd6\x8e\x57\x12\x6a\x8b\x51\x65\x39\x68\x4f\x5f\x02\xd7\xbe\xed\xf1\xd1\x51\x33\xe2\x91\xeb\x60\xb0\xeb\x3b\x2f\x92\x12\xd7\x18\xe6\xad\x65\x85\xd2\xfc\x5a\x8a\xdb\xc3\x4b\xda\x1d\x9f\x43\x33\xec\x96\xb4\xaa\xb4\x8f\xcd\xdf\x76\xe0\xdf\x49\xd0\xd4\x84\x43\xe0\xb4\xf9\x86\xd0\x8b\xdd\x06\xdc\x62\x77\xab\x0a\x65\x04\x7e\x80\x59\xb1\x23\xe1\x40\x6e\x55\x18\x0e\xc8\xb1\x30\x5c\x0d\x93\xb4\x84\xdb\xe8\xbf\xe3\x9d\xf6\x5b\xeb\x19\x6c\xd9\xf7\x2a\x3b\x59\x92\xd3\x96\x5e\xf1\x30\x77\xed\x17\xa3\x39\x3b\xe4\x82\x78\x08\x7c\xfc\xef\xf1\x3e\x4a\x32\x7c\x34\xdd\xed\x76\xfe\x68\x5a\x12\xcc\x9b\x56\xaf\xc8\x2d\xc8\xad\x3e\x2f\xf3\x8f\x66\xb1\x9e\x3f\xa1\x91\x46\xc4\xa3\xec\xc6\x75\xcf\x16\xdb\x65\xd7\x1b\xa3\x77\xe6\xb6\x6b\xe4\x6f\x88\x66\xbf\x02\x00\x00\xff\xff\x18\xe9\xd0\x18\x90\x07\x00\x00"),
		},
		"/reconciler/kabanero-cli.yaml~": &vfsgen۰CompressedFileInfo{
			name:             "kabanero-cli.yaml~",
			modTime:          time.Date(2019, 8, 21, 1, 34, 46, 590608562, time.UTC),
			uncompressedSize: 1917,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x54\x51\x4f\xdb\x40\x0c\x7e\xcf\xaf\xb0\xd8\x03\xd2\xa4\x14\x21\x78\x80\xbc\x15\xc6\xa6\x69\x8c\x55\x05\xed\x15\xb9\x57\xb7\x31\x5c\xce\xa7\x3b\xa7\xa8\xfc\xfa\x29\x69\x52\xd2\x26\x1d\x68\xcb\x4b\xaf\xb6\xef\xf3\x67\xdf\x67\xa3\xe7\xdf\x14\x22\x8b\xcb\x00\xbd\x8f\x27\xab\xd3\xe4\x99\xdd\x3c\x83\x2f\xe4\xad\xac\x0b\x72\x9a\x14\xa4\x38\x47\xc5\x2c\x01\x70\x58\x50\x06\xcf\x38\x43\x47\x41\x52\x63\x39\x89\x9e\x4c\xe5\x8a\x64\xc9\xa8\x84\xea\x0c\x50\xa0\x9a\xfc\x16\x67\x64\xe3\xc6\x00\x55\x82\xbd\xab\x00\x81\xbc\x65\x83\x31\x83\xd3\x04\x40\xa9\xf0\x16\x95\x1a\x88\x4e\xde\xea\xb3\x3b\x68\xc3\x78\x00\x2d\x9d\xfa\x4c\x61\xc5\x86\xc6\xc6\x48\xe9\xf4\xae\xcf\x7d\x13\x66\xc4\x29\xb2\xa3\xd0\x01\x4f\x87\x4a\x85\xed\xf7\x09\xa6\xe4\x2d\x1a\x02\xcd\x39\xc2\x0b\x6b\x0e\x9a\x13\xcc\x4a\xb6\x0a\x5c\xe0\x92\x6a\x80\xce\x95\xda\x98\x81\x78\x72\xa9\xe5\x19\x05\x5d\x67\x05\x9b\x20\x93\x20\x0b\xb6\x74\x96\x3e\xe1\x0a\x2f\xd2\x2a\xe0\xe9\xb2\x73\xd1\x4b\xd0\x0e\xb3\x8a\xdb\x96\xf1\x44\x82\x66\x70\x79\x7e\x7e\xb6\x9f\x69\x52\x5a\x3b\x11\xcb\x66\x9d\xc1\xd8\xbe\xe0\x3a\x76\x22\xc8\xad\xba\x80\x6f\xe5\xfe\x18\x5f\x8d\xef\x6e\xa6\xbf\x1e\xaf\x6f\xbf\x3f\xde\x8d\x7f\xde\xdc\x4f\xc6\xd7\x37\x3b\xa1\x00\x2b\xb4\x25\x7d\x0d\x52\x64\x7b\x0e\x80\x05\x93\x9d\x4f\x69\xd1\xf7\x34\xbe\x09\x6a\x9e\x6d\x9f\x76\x54\xf7\x28\x4d\xd3\xa4\xab\xc4\xad\x08\xef\x37\xef\xf7\x6f\x0a\x1c\x92\xc7\xb6\x95\x29\xf8\x20\x2a\x46\x6c\x06\x0f\xd7\x93\xa4\xed\x73\x06\x6d\x2b\x15\xc3\x92\xb4\xd3\xdf\x83\x2c\xa7\x52\xea\x87\x39\xaa\x6c\xd8\xed\x16\x58\x59\x06\xf5\xa6\xad\xe0\x95\x42\xc1\x0e\xb5\x4e\xed\x31\x46\xcd\x83\x94\xcb\xbc\x47\x2b\xcc\xd0\x8c\xb0\xd4\x5c\x02\xbf\xd6\xf1\xa3\xe7\x8b\x38\x62\x39\xe9\x10\xb6\xbb\x7c\x4d\xa0\x3a\xf2\x81\x0b\x8a\x8a\x85\xcf\xc0\x95\xd6\x0e\x57\x12\x4a\x4b\x31\x4b\x52\x40\xcf\xdf\x82\x94\xbe\x69\xe8\xd1\x51\x3d\xcf\x51\xca\x60\xa8\x6d\xb2\xcc\x2b\xd9\xad\x28\xcc\x1a\xcb\x92\xb4\xfe\xb5\x1c\x37\x87\x97\x6a\x51\x7c\x0c\xcd\x88\x5b\xf0\xb2\x40\x1f\xeb\xbf\xcd\x74\x1f\x48\x50\xd7\x44\x7d\xe0\x6a\xcd\xf5\xa1\xe7\xdb\x75\xb7\xc1\x6e\xf7\x12\xe9\x00\x7c\x0f\xb3\x10\xc7\x2a\x81\xdd\x72\x64\x24\x90\xc4\x91\x91\xa2\x9f\xa4\x21\xdc\x44\xff\x1f\xef\x6a\x99\x35\x9e\xde\x4a\x3d\x54\xd9\xc9\x82\x1d\x5a\x7e\xa5\xfd\xdc\xa5\x9f\x0f\xe6\x6c\x91\x47\x2c\x7d\xe0\xe3\xcf\xc7\xbb\x28\x95\xe1\xbd\x51\x6e\x56\xf1\x7b\xd3\x52\xc1\xbc\x69\xf5\x8a\xdd\x9c\xdd\xf2\xe3\x32\x7f\x6f\x16\xcb\xd9\x13\x19\xad\x45\x3c\xc8\x6e\x58\xf7\x62\xa9\xd9\x6c\x9d\x31\x3a\x30\xb7\x6d\x23\xff\x42\x34\xf9\x13\x00\x00\xff\xff\x61\xae\xac\xde\x7d\x07\x00\x00"),
		},
		"/samples": &vfsgen۰DirInfo{
			name:    "samples",
			modTime: time.Date(2019, 8, 20, 18, 12, 10, 710225710, time.UTC),
		},
		"/samples/collection.yaml": &vfsgen۰FileInfo{
			name:    "collection.yaml",
			modTime: time.Date(2019, 8, 20, 18, 12, 10, 710225710, time.UTC),
			content: []byte("\x61\x70\x69\x56\x65\x72\x73\x69\x6f\x6e\x3a\x20\x6b\x61\x62\x61\x6e\x65\x72\x6f\x2e\x69\x6f\x2f\x76\x31\x61\x6c\x70\x68\x61\x31\x0a\x6b\x69\x6e\x64\x3a\x20\x43\x6f\x6c\x6c\x65\x63\x74\x69\x6f\x6e\x0a\x6d\x65\x74\x61\x64\x61\x74\x61\x3a\x0a\x20\x20\x6e\x61\x6d\x65\x3a\x20\x6a\x61\x76\x61\x2d\x6d\x69\x63\x72\x6f\x70\x72\x6f\x66\x69\x6c\x65\x0a\x73\x70\x65\x63\x3a\x0a\x20\x20\x76\x65\x72\x73\x69\x6f\x6e\x3a\x20\x30\x2e\x30\x2e\x32"),
		},
		"/samples/full.yaml": &vfsgen۰CompressedFileInfo{
			name:             "full.yaml",
			modTime:          time.Date(2019, 8, 20, 18, 12, 10, 710225710, time.UTC),
			uncompressedSize: 541,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\xd0\xbd\x6e\xdc\x30\x0c\x07\xf0\x5d\x4f\xf1\x07\xb2\xf6\xac\xdc\xea\x2d\x68\xb7\xae\x45\x77\x5a\xe2\x55\x44\x64\xd1\x10\x69\x5f\xf3\xf6\x45\x7c\x4e\x6a\x64\xe5\xc7\x8f\x1f\xb4\xc8\x6f\xee\x26\xda\x46\xbc\xd2\x44\x8d\xbb\x0e\xa2\x71\xbb\x52\x5d\x0a\x5d\xc3\xab\xb4\x3c\xe2\xe7\x91\x0a\x33\x3b\x65\x72\x1a\x03\xd0\x68\xe6\xff\x5d\xc1\x16\x4e\xef\xe1\x27\xfc\x2a\x8c\xa5\x92\xdf\xb4\xcf\xd8\x1e\x3c\x32\x3b\xf7\x59\x1a\x1b\xbc\x30\x32\x9b\x74\xce\x9f\xe9\x9b\x76\x50\xad\x48\x3a\x2f\xda\xb8\xb9\x7d\xc3\xb4\x3a\xbc\xa8\xf1\xae\x26\x6a\x98\x18\xba\x71\xef\x92\xb9\x41\x5a\x96\x4d\xf2\x4a\xb5\xbe\x81\x0c\x77\xae\x35\xe0\x43\x1c\xf1\x3c\x3c\x0f\xd7\x10\x80\xa4\xb5\x72\x72\xd1\x66\x23\x02\xf0\xae\xbd\xa0\x8a\x39\xf4\xf6\x98\x80\xce\x8b\x9a\xb8\x76\x61\xc3\xbd\x48\x2a\xa0\xce\x30\xa6\x9e\x0a\xe7\x7d\xbf\x93\xb3\x2b\xe7\x9e\x03\xbe\x1c\x5f\x91\x96\xd6\x89\x5c\xfb\x1e\x05\xd6\x5e\x47\x14\xf7\xc5\xc6\x18\xff\x88\x97\x75\x1a\x92\xce\xf1\xe3\x7b\x17\xd1\x78\xe2\x63\xe7\xca\x64\x6c\x31\xeb\xbd\x55\xa5\x1c\xb7\xfd\x9c\xf8\x09\x5f\xa4\x65\xfe\x3b\xbc\xd1\x5c\x8f\x19\x4f\x78\x49\x2e\x1b\x39\x1b\x08\x99\x6f\xb4\x56\x87\xf1\x7e\xe5\xd7\xdd\x01\x3a\x8a\x7f\x3c\x0a\xbf\x9f\x9f\xe4\x7d\x65\x84\x7f\x01\x00\x00\xff\xff\xc1\x27\xd0\xff\x1d\x02\x00\x00"),
		},
		"/samples/simple.yaml": &vfsgen۰FileInfo{
			name:    "simple.yaml",
			modTime: time.Date(2019, 7, 30, 17, 44, 17, 334534490, time.UTC),
			content: []byte("\x61\x70\x69\x56\x65\x72\x73\x69\x6f\x6e\x3a\x20\x6b\x61\x62\x61\x6e\x65\x72\x6f\x2e\x69\x6f\x2f\x76\x31\x61\x6c\x70\x68\x61\x31\x0a\x6b\x69\x6e\x64\x3a\x20\x4b\x61\x62\x61\x6e\x65\x72\x6f\x0a\x6d\x65\x74\x61\x64\x61\x74\x61\x3a\x0a\x20\x20\x6e\x61\x6d\x65\x3a\x20\x6b\x61\x62\x61\x6e\x65\x72\x6f\x0a\x73\x70\x65\x63\x3a\x20\x7b\x7d\x0a"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/components.yaml"].(os.FileInfo),
		fs["/reconciler"].(os.FileInfo),
		fs["/samples"].(os.FileInfo),
	}
	fs["/reconciler"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/reconciler/kabanero-cli.yaml"].(os.FileInfo),
		fs["/reconciler/kabanero-cli.yaml~"].(os.FileInfo),
	}
	fs["/samples"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/samples/collection.yaml"].(os.FileInfo),
		fs["/samples/full.yaml"].(os.FileInfo),
		fs["/samples/simple.yaml"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰FileInfo:
		return &vfsgen۰File{
			vfsgen۰FileInfo: f,
			Reader:          bytes.NewReader(f.content),
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰FileInfo is a static definition of an uncompressed file (because it's not worth gzip compressing).
type vfsgen۰FileInfo struct {
	name    string
	modTime time.Time
	content []byte
}

func (f *vfsgen۰FileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰FileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰FileInfo) NotWorthGzipCompressing() {}

func (f *vfsgen۰FileInfo) Name() string       { return f.name }
func (f *vfsgen۰FileInfo) Size() int64        { return int64(len(f.content)) }
func (f *vfsgen۰FileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰FileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰FileInfo) IsDir() bool        { return false }
func (f *vfsgen۰FileInfo) Sys() interface{}   { return nil }

// vfsgen۰File is an opened file instance.
type vfsgen۰File struct {
	*vfsgen۰FileInfo
	*bytes.Reader
}

func (f *vfsgen۰File) Close() error {
	return nil
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
